// <auto-generated />
using System;
using Codere_Challenge_Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Codere_Challenge_Infrastructure.Migrations
{
    [DbContext(typeof(TvMazeDbContext))]
    [Migration("20240616145901_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.6");

            modelBuilder.Entity("Codere_Challenge_Core.Entities.JobExecutionStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ExecutionDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("JobStatus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LastIndexProcessed")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("JobExecutionProcess");
                });

            modelBuilder.Entity("Codere_Challenge_Core.Entities.Network", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Networks");
                });

            modelBuilder.Entity("Codere_Challenge_Domain.Entities.Show", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AverageRuntime")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Ended")
                        .HasColumnType("TEXT");

                    b.Property<string>("Genres")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Language")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("NetworkId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OfficialSite")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Premiered")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Runtime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.Property<string>("Summary")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.Property<long?>("Updated")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Weight")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("NetworkId");

                    b.ToTable("Shows");
                });

            modelBuilder.Entity("Codere_Challenge_Core.Entities.Network", b =>
                {
                    b.OwnsOne("Codere_Challenge_Core.Entities.Country", "Country", b1 =>
                        {
                            b1.Property<int>("NetworkId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Code")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Name")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Timezone")
                                .HasColumnType("TEXT");

                            b1.HasKey("NetworkId");

                            b1.ToTable("Networks");

                            b1.WithOwner()
                                .HasForeignKey("NetworkId");
                        });

                    b.Navigation("Country")
                        .IsRequired();
                });

            modelBuilder.Entity("Codere_Challenge_Domain.Entities.Show", b =>
                {
                    b.HasOne("Codere_Challenge_Core.Entities.Network", "Network")
                        .WithMany()
                        .HasForeignKey("NetworkId");

                    b.OwnsOne("Codere_Challenge_Core.Entities.Rating", "Rating", b1 =>
                        {
                            b1.Property<int>("ShowId")
                                .HasColumnType("INTEGER");

                            b1.Property<decimal?>("Average")
                                .HasColumnType("TEXT");

                            b1.HasKey("ShowId");

                            b1.ToTable("Shows");

                            b1.WithOwner()
                                .HasForeignKey("ShowId");
                        });

                    b.OwnsOne("Codere_Challenge_Core.Entities.Schedule", "Schedule", b1 =>
                        {
                            b1.Property<int>("ShowId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Days")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("Time")
                                .HasColumnType("TEXT");

                            b1.HasKey("ShowId");

                            b1.ToTable("Shows");

                            b1.WithOwner()
                                .HasForeignKey("ShowId");
                        });

                    b.Navigation("Network");

                    b.Navigation("Rating")
                        .IsRequired();

                    b.Navigation("Schedule")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
